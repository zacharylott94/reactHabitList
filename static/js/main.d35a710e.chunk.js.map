{"version":3,"sources":["logo.svg","ItemState.js","ListItemForm.js","ListItem.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemState","desc","state","count","ListItemForm","props","value","event","this","setState","target","submit","type","onChange","e","handleChange","onKeyPress","key","handleSubmit","onClick","React","Component","ListItem","className","complete","remove","defaultProps","List","items","JSON","parse","get","setInterval","nextDay","map","i","handleClick","removeItem","addItem","renderChildren","day","Date","getDay","lastTime","String","resetAll","set","getItem","item","reset","updateState","itemIndex","increment","decrement","slice","concat","find","push","findIndex","stringify","window","localStorage","setItem","App","testList","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d35a710e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//This factory function returns a simple object that helps organize data\nexport function ItemState(desc = \"Description\", state = false, count = 0) {\n  return {\n    desc,\n    state,\n    count\n  };\n}\n","import React from 'react';\nexport class ListItemForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  handleSubmit() {\n    this.props.submit(this.state.value);\n    this.setState({ value: '' });\n  }\n  render() {\n    return (<div>\n      <input type=\"text\" value={this.state.value} onChange={(e) => this.handleChange(e)} onKeyPress={(e) => {\n        // e.preventDefault();\n        if (e.key === \"Enter\") {\n          this.handleSubmit();\n        }\n      }} />\n      <button onClick={() => this.handleSubmit()}>Add to list</button>\n    </div>);\n  }\n}\n","import React from 'react';\nimport { ItemState } from './ItemState';\nexport class ListItem extends React.Component {\n\n  render() {\n    return (<div className=\"ListItem\">\n      <div className=\"ListItemCounter\">{this.props.count}</div>\n      <div className={this.props.complete ? \"true\" :\"false\"} onClick={() => this.props.onClick(this.props.desc)}>{this.props.desc}</div>\n      <button onClick={() => { this.props.remove(this.props.desc); }}>X</button>\n\n    </div>);\n  }\n}\nListItem.defaultProps = ItemState();\n","import React from 'react';\nimport { ItemState } from './ItemState';\nimport { ListItemForm } from './ListItemForm';\nimport { ListItem } from \"./ListItem\";\nexport class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: JSON.parse(get(\"items\")) || []\n    };\n\n  }\n\n  componentDidMount() {\n    setInterval(() => {this.nextDay()}, 10000)\n  }\n  \n  renderChildren() {\n    let items = this.state.items;\n    items = items.map((i) => {\n      return <ListItem key={i.desc} {...i} onClick={(desc) => { this.handleClick(desc); }} remove={(desc) => { this.removeItem(desc); }} />;\n    });\n    return items;\n  }\n  render() {\n    return (<div>\n      {/* <button onClick = {() => {this.resetAll()}} >reset</button> */}\n      <ListItemForm submit={(desc) => { this.addItem(desc); }} />\n      <div className=\"List\">\n        {this.renderChildren()}\n      </div>\n    </div>);\n  }\n\n\n//------------------------------------------------\n\n  //compares current and last times, resets if they don't match\n  nextDay(){\n    let day = new Date().getDay();\n    let lastTime = get(\"lastTime\")\n    if (lastTime !== String(day)) {\n      this.resetAll();\n      lastTime = day;\n      set(\"lastTime\", String(lastTime));\n    }\n  }\n\n  resetAll(){\n    let {items} = this.getItem()\n    items = items.map((item) => {\n      return this.reset(item)\n    })\n    this.updateState(items)\n  }\n\n\n\n  //gets passed to ItemList children\n  handleClick(desc) {\n    let { items, itemIndex, item } = this.getItem(desc);\n    //toggle completion state of item, increment/decrement it, plug it back into item array\n    item.complete = !item.complete;\n    item = item.complete ? this.increment(item) : this.decrement(item);\n    items[itemIndex] = item;\n    //this updates List state and causes a rerender\n    this.updateState(items);\n  }\n\n\n\n  //Helper functions\n  increment(item) {\n    item.count += 1;\n    return item;\n  }\n  decrement(item) {\n    item.count -= 1;\n    return item;\n  }\n  reset(item) {\n    item.complete = false;\n    return item;\n  }\n  removeItem(desc) {\n    let { items, itemIndex } = this.getItem(desc);\n    items = items.slice(0, itemIndex).concat(items.slice(itemIndex + 1));\n    this.updateState(items);\n  }\n  addItem(desc) {\n    if (desc === '') {\n      return;\n    }\n    let { items } = this.getItem();\n\n    if (items.find((i) => i.desc === desc)) {\n        return\n    }\n\n    let item = ItemState(desc);\n    items.push(item);\n    this.updateState(items);\n  }\n  getItem(desc) {\n    let items = this.state.items;\n    let itemIndex = items.findIndex((i) => i.desc === desc);\n    let item = items[itemIndex];\n    return { items, itemIndex, item };\n  }\n  updateState(items) {\n    this.setState({ items: items });\n    set(\"items\", JSON.stringify(items))\n  }\n  //End Helper Functions\n}\n\n//sets a value in localStorage\n//accepts strings, doesn't return\nfunction set(key, value){\n    window.localStorage.setItem(key,value);\n  }\n  \n  //gets a value in localStorage\n  //accepts string, returns string\n  function get(key){\n    return window.localStorage.getItem(key);\n  }\n  \n  //empties a value in localStorage\n  function clear(key){\n    window.localStorage.removeItem(key);\n  }\n  \n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ItemState } from './ItemState';\nimport { List } from './List';\n\nfunction App() {\n  const testList = [ItemState(\"Do you homework\"),ItemState(\"Eat a banana\"),ItemState(\"Go for a walk\"),ItemState()]\n\n  return (\n    <div className=\"App\">\n      <h1>Habit List</h1>\n        <List items={testList}/>\n    </div>\n  );\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}